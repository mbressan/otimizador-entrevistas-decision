{
	"info": {
		"_postman_id": "otimizador-entrevistas-api",
		"name": "Otimizador de Entrevistas - API Tests",
		"description": "Coleção de testes completa para a API do Otimizador de Entrevistas. Inclui testes de health check, predições ML e validações.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "otimizador-team"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has correct structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData).to.have.property('model_loaded');",
							"    pm.expect(jsonData).to.have.property('model_type');",
							"});",
							"",
							"pm.test(\"Service is healthy\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('healthy');",
							"    pm.expect(jsonData.model_loaded).to.be.true;",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Status Page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is HTML\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
							"});",
							"",
							"pm.test(\"Page contains status information\", function () {",
							"    pm.expect(pm.response.text()).to.include('Status do Sistema');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict - High Quality Match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has ML prediction structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('prediction');",
							"    pm.expect(jsonData).to.have.property('prediction_text');",
							"    pm.expect(jsonData).to.have.property('quality_score');",
							"    pm.expect(jsonData).to.have.property('probability');",
							"    pm.expect(jsonData).to.have.property('analysis');",
							"});",
							"",
							"pm.test(\"Prediction values are valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.prediction).to.be.oneOf([0, 1]);",
							"    pm.expect(jsonData.quality_score).to.be.a('number');",
							"    pm.expect(jsonData.quality_score).to.be.at.least(0);",
							"    pm.expect(jsonData.quality_score).to.be.at.most(100);",
							"});",
							"",
							"pm.test(\"Probability structure is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.probability).to.have.property('low_quality');",
							"    pm.expect(jsonData.probability).to.have.property('high_quality');",
							"    ",
							"    const lowProb = jsonData.probability.low_quality;",
							"    const highProb = jsonData.probability.high_quality;",
							"    ",
							"    pm.expect(lowProb).to.be.a('number');",
							"    pm.expect(highProb).to.be.a('number');",
							"    pm.expect(lowProb + highProb).to.be.closeTo(1.0, 0.01);",
							"});",
							"",
							"pm.test(\"Analysis contains compatibility scores\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.analysis).to.have.property('tech_compatibility');",
							"    pm.expect(jsonData.analysis).to.have.property('academic_compatibility');",
							"    pm.expect(jsonData.analysis).to.have.property('english_compatibility');",
							"});",
							"",
							"pm.test(\"Response time is acceptable for ML prediction\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"vaga\": {\n    \"titulo_vaga\": \"Desenvolvedor Python Sênior\",\n    \"competencias_tecnicas_requeridas\": \"Python, Django, PostgreSQL, Docker, AWS\",\n    \"nivel_academico\": \"superior\",\n    \"nivel_ingles\": \"intermediário\",\n    \"nivel_profissional\": \"sênior\",\n    \"tipo_contratacao\": \"clt\",\n    \"areas_atuacao\": \"Tecnologia\"\n  },\n  \"candidato\": {\n    \"conhecimentos_tecnicos\": \"Python, Django, PostgreSQL, Docker, AWS, React\",\n    \"nivel_academico\": \"superior\",\n    \"nivel_ingles\": \"avançado\",\n    \"area_de_atuacao\": \"Desenvolvimento de Software\"\n  }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/predict",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict - Low Quality Match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response structure is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('prediction');",
							"    pm.expect(jsonData).to.have.property('quality_score');",
							"    pm.expect(jsonData).to.have.property('analysis');",
							"});",
							"",
							"pm.test(\"Low quality prediction has lower score\", function () {",
							"    const jsonData = pm.response.json();",
							"    // Para este caso de mismatch, esperamos score mais baixo",
							"    pm.expect(jsonData.quality_score).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Analysis reflects mismatch\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.analysis).to.have.property('tech_compatibility');",
							"    pm.expect(jsonData.analysis).to.have.property('area_match');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"vaga\": {\n    \"titulo_vaga\": \"Desenvolvedor Java Sênior\",\n    \"competencias_tecnicas_requeridas\": \"Java, Spring Boot, Oracle, Maven\",\n    \"nivel_academico\": \"superior\",\n    \"nivel_ingles\": \"avançado\",\n    \"nivel_profissional\": \"sênior\",\n    \"tipo_contratacao\": \"clt\",\n    \"areas_atuacao\": \"Tecnologia\"\n  },\n  \"candidato\": {\n    \"conhecimentos_tecnicos\": \"JavaScript, React, Node.js, CSS, HTML\",\n    \"nivel_academico\": \"técnico\",\n    \"nivel_ingles\": \"básico\",\n    \"area_de_atuacao\": \"Design Gráfico\"\n  }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/predict",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict - Frontend Developer Match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('prediction');",
							"    pm.expect(jsonData).to.have.property('model_type');",
							"    pm.expect(jsonData).to.have.property('analysis');",
							"});",
							"",
							"pm.test(\"Tech compatibility reflects frontend skills\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.analysis.tech_compatibility).to.include('%');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"vaga\": {\n    \"titulo_vaga\": \"Desenvolvedor Frontend React\",\n    \"competencias_tecnicas_requeridas\": \"React, JavaScript, TypeScript, CSS, HTML, Redux\",\n    \"nivel_academico\": \"superior\",\n    \"nivel_ingles\": \"intermediário\",\n    \"nivel_profissional\": \"pleno\",\n    \"tipo_contratacao\": \"pj\",\n    \"areas_atuacao\": \"Tecnologia\"\n  },\n  \"candidato\": {\n    \"conhecimentos_tecnicos\": \"React, JavaScript, TypeScript, CSS, HTML, Vue.js, Angular\",\n    \"nivel_academico\": \"superior\",\n    \"nivel_ingles\": \"intermediário\",\n    \"area_de_atuacao\": \"Desenvolvimento Frontend\"\n  }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/predict",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict - Missing Required Fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 for missing fields\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message is informative\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response time is fast for validation error\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"vaga\": {\n    \"titulo_vaga\": \"Desenvolvedor Python\"\n  }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/predict",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict - Invalid JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 for invalid JSON\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error response contains error field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"vaga\": {\n    \"titulo_vaga\": \"Desenvolvedor\",\n  }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/predict",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Home Page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is HTML\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
							"});",
							"",
							"pm.test(\"Page contains application title\", function () {",
							"    pm.expect(pm.response.text()).to.include('Otimizador de Entrevistas');",
							"});",
							"",
							"pm.test(\"Page has predict functionality\", function () {",
							"    pm.expect(pm.response.text()).to.include('Analisar Compatibilidade');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Starting test for: ' + pm.info.requestName);",
					"",
					"// Set timestamp for response time tracking",
					"pm.globals.set('requestStartTime', new Date().getTime());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response has valid JSON content-type or is HTML\", function () {",
					"    const contentType = pm.response.headers.get('Content-Type');",
					"    pm.expect(contentType).to.satisfy((ct) => {",
					"        return ct.includes('application/json') || ct.includes('text/html');",
					"    });",
					"});",
					"",
					"// Log response details for debugging",
					"if (pm.response.code !== 200) {",
					"    console.log('Non-200 response for:', pm.info.requestName);",
					"    console.log('Status:', pm.response.code);",
					"    console.log('Response:', pm.response.text());",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost",
			"type": "string"
		}
	]
}
